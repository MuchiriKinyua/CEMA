import pandas as pd
import seaborn as sns
import statsmodels.api as sm
import matplotlib.pyplot as plt
warnings.filterwarnings("ignore")
from statsmodels.regression.mixed_linear_model import MixedLM
hiv_data = pd.read_csv("data/HIV data 2000-2023.csv", encoding="latin1")
hiv_data
poverty_data = pd.read_excel("data/multidimensional_poverty.xlsx")
poverty_data
hiv_data.columns
poverty_data.columns
hiv_data.info()
poverty_data.info()
hiv_data.describe()
poverty_data.describe()
hiv_data.shape
poverty_data.shape
hiv_data.rename(columns={
'Location': 'Country',
'Period': 'Year',
'Value': 'HIV_Population'
}, inplace=True)
hiv_data.columns
# Rename columns for ease of use
poverty_data.columns = [
'Region', 'Country_Code', 'Country', 'Year', 'Survey_Name',
'Survey_Year', 'Survey_Coverage', 'Welfare_Type', 'Survey_Comparability',
'Monetary', 'Education_Attainment', 'Education_Enrollment',
'Electricity', 'Sanitation', 'Drinking_Water', 'Multidimensional_Poverty'
]
# Drop the first and second rows
poverty_data = poverty_data.drop(index=[0, 1]).reset_index(drop=True)
poverty_data
hiv_data = hiv_data[['Country', 'Year', 'HIV_Population', 'ParentLocationCode']]
hiv_data
poverty_data = poverty_data[[
'Country',
'Country_Code',
'Year',
'Monetary',
'Education_Attainment',
'Education_Enrollment',
'Electricity',
'Sanitation',
'Drinking_Water',
'Multidimensional_Poverty'
]]
poverty_data
hiv_data.duplicated().sum()
poverty_data.duplicated().sum()
poverty_data.isna().sum()
poverty_data
# Replace '-' strings with actual NaN values
poverty_data.replace('-', pd.NA, inplace=True)
poverty_data
# Columns to convert
numeric_columns = [
'Monetary', 'Education_Attainment', 'Education_Enrollment',
'Electricity', 'Sanitation', 'Drinking_Water', 'Multidimensional_Poverty'
]
# Convert to numeric
poverty_data[numeric_columns] = poverty_data[numeric_columns].apply(pd.to_numeric, errors='coerce')
poverty_data
poverty_data[numeric_columns] = poverty_data[numeric_columns].fillna(poverty_data[numeric_columns].mean())
poverty_data
hiv_data.isna().sum()
hiv_data
hiv_data[hiv_data['HIV_Population'] == 'No data'].shape[0]
hiv_data[hiv_data['HIV_Population'] == 'No data']
# dropping the missing values
hiv_data = hiv_data[hiv_data['HIV_Population'] != 'No data']
hiv_data
# Removing range values
hiv_data = hiv_data[hiv_data['HIV_Population'] != 'No data'].copy()
hiv_data['HIV_Population'] = hiv_data['HIV_Population'].str.extract(r'(\d[\d\s]*)')[0]
hiv_data['HIV_Population'] = hiv_data['HIV_Population'].str.replace(' ', '').astype(int)
hiv_data
# Total HIV per country
total_by_country = hiv_data.groupby('Country')['HIV_Population'].sum().reset_index()
# Calculate cumulative % contribution
total_by_country = total_by_country.sort_values(by='HIV_Population', ascending=False)
total = total_by_country['HIV_Population'].sum()
total_by_country['CumulativePercent'] = 100 * total_by_country['HIV_Population'].cumsum() / total
# Filter countries that contribute to 75%
top_75_countries = total_by_country[total_by_country['CumulativePercent'] <= 75]['Country']
# Filter and plot
top_data = hiv_data[hiv_data['Country'].isin(top_75_countries)]
# Pivot the data to prepare for bar chart
pivot_df = top_data.pivot_table(index='Year', columns='Country', values='HIV_Population', aggfunc='sum').fillna(0)
# Plot
import matplotlib.pyplot as plt
fig, ax = plt.subplots(figsize=(15, 8))
pivot_df.plot(kind='bar', stacked=True, colormap='tab20', ax=ax)
ax.set_title('HIV Burden by Year in Top 75% Contributing Countries', fontsize=16)
ax.set_ylabel('Estimated People Living with HIV')
ax.set_xlabel('Year')
ax.legend(title='Country', bbox_to_anchor=(1.05, 1), loc='upper left')
ax.grid(axis='y')
plt.tight_layout()
plt.savefig("media/output.png")  # ✅ Saves image
plt.close()  # ✅ Clean up
# Calculate total HIV per country within each region
region_country_totals = hiv_data.groupby(['ParentLocationCode', 'Country'])['HIV_Population'].sum().reset_index()
# Identify top 75% contributing countries per region
top_75_countries_by_region = {}
for region in region_country_totals['ParentLocationCode'].unique():
region_df = region_country_totals[region_country_totals['ParentLocationCode'] == region].sort_values(by='HIV_Population', ascending=False)
total = region_df['HIV_Population'].sum()
region_df['CumulativePercent'] = 100 * region_df['HIV_Population'].cumsum() / total
top_countries = region_df[region_df['CumulativePercent'] <= 75]['Country'].tolist()
top_75_countries_by_region[region] = top_countries
# Filter original hiv_data for only top 75% countries in each region
filtered_data = hiv_data[
hiv_data.apply(lambda row: row['Country'] in top_75_countries_by_region.get(row['ParentLocationCode'], []), axis=1)
]
# Plot trends by region
import matplotlib.pyplot as plt
regions = filtered_data['ParentLocationCode'].unique()
n_regions = len(regions)
fig, axes = plt.subplots(n_regions, 1, figsize=(15, 5 * n_regions), sharex=True)
if n_regions == 1:
axes = [axes]  # make sure it's iterable
for ax, region in zip(axes, regions):
region_data = filtered_data[filtered_data['ParentLocationCode'] == region]
pivot_df = region_data.pivot_table(index='Year', columns='Country', values='HIV_Population', aggfunc='sum').fillna(0)
pivot_df.plot(kind='bar', stacked=True, colormap='tab20', ax=ax)
ax.set_title(f'HIV Trend in {region} Region (Top 75% Countries)', fontsize=14)
ax.set_ylabel('HIV Population')
ax.legend(title='Country', bbox_to_anchor=(1.01, 1), loc='upper left')
ax.grid(axis='y')
plt.xlabel('Year')
plt.tight_layout()
plt.savefig("media/region_trends.png")
plt.close()
# Get all possible pairs within same country
df = pd.merge(hiv_data, poverty_data, on='Country', how='inner', suffixes=('_hiv', '_poverty'))
# Calculate year difference
df['YearDiff'] = (df['Year_hiv'] - df['Year_poverty']).abs()
# Keep the row with the smallest year difference per HIV data row
df = df.loc[df.groupby(['Country', 'Year_hiv'])['YearDiff'].idxmin()].copy()
# Rename to keep consistent
df = df.rename(columns={'Year_hiv': 'Year'})
df
# Log-transform the target variable
df['log_HIV_Population'] = np.log1p(df['HIV_Population'])
# Select predictors
predictors = [
'Monetary', 'Education_Attainment', 'Education_Enrollment',
'Electricity', 'Sanitation', 'Drinking_Water', 'Multidimensional_Poverty'
]
# Fixed effects
X = sm.add_constant(df[predictors])
# Mixed effects model — random intercept by country
model = MixedLM(
endog=df['log_HIV_Population'],
exog=X,
groups=df['Country']
)
result = model.fit()
print(result.summary())
import json
import warnings
import pandas as pd
import seaborn as sns
import geopandas as gpd
import matplotlib.pyplot as plt
warnings.filterwarnings("ignore")
# loading the data
burundi = gpd.read_file("data/gadm41_BDI_0.json")
# View and inspect
print(burundi.head())
print(burundi.crs)
# Plot and save
ax = burundi.plot(figsize=(8, 6))
fig = ax.get_figure()
fig.savefig("media/burundi_map.png", dpi=300)
# loading the data
congo = gpd.read_file("data/gadm41_COD_0.json")
# View and inspect
print(congo.head())
print(congo.crs)
# Plot and save
ax = congo.plot(figsize=(8, 6))
fig = ax.get_figure()
fig.savefig("media/congo_map.png", dpi=300)
# loading the data
kenya = gpd.read_file("data/gadm41_KEN_0.json")
# View and inspect
print(kenya.head())
print(kenya.crs)
# Plot and save
ax = kenya.plot(figsize=(8, 6))
fig = ax.get_figure()
fig.savefig("media/kenya_map.png", dpi=300)
# loading the data
rwanda = gpd.read_file("data/gadm41_RWA_0.json")
# View and inspect
print(rwanda.head())
print(rwanda.crs)
# Plot and save
ax = rwanda.plot(figsize=(8, 6))
fig = ax.get_figure()
fig.savefig("media/rwanda_map.png", dpi=300)
# loading the data
somalia = gpd.read_file("data/gadm41_SOM_0.json")
# View and inspect
print(somalia.head())
print(somalia.crs)
# Plot and save
ax = somalia.plot(figsize=(8, 6))
fig = ax.get_figure()
fig.savefig("media/somalia_map.png", dpi=300)
# loading the data
sudan = gpd.read_file("data/gadm41_SSD_0.json")
# View and inspect
print(sudan.head())
print(sudan.crs)
# Plot and save
ax = sudan.plot(figsize=(8, 6))
fig = ax.get_figure()
fig.savefig("media/sudan_map.png", dpi=300)
# loading the data
tanzania = gpd.read_file("data/gadm41_TZA_0.json")
# View and inspect
print(tanzania.head())
print(tanzania.crs)
# Plot and save
ax = tanzania.plot(figsize=(8, 6))
fig = ax.get_figure()
fig.savefig("media/tanzania_map.png", dpi=300)
# loading the data
uganda = gpd.read_file("data/gadm41_UGA_0.json")
# View and inspect
print(uganda.head())
print(uganda.crs)
# Plot and save
ax = uganda.plot(figsize=(8, 6))
fig = ax.get_figure()
fig.savefig("media/uganda_map.png", dpi=300)
# Merge them
east_africa = gpd.GeoDataFrame(pd.concat([
burundi, congo, kenya, rwanda, somalia, sudan, tanzania, uganda
], ignore_index=True))
# displaying the result
print(east_africa.head())
print(east_africa.crs)
print(east_africa.plot())
# Plot and save
ax = east_africa.plot(figsize=(8, 6))
fig = ax.get_figure()
fig.savefig("media/east_africa_map.png", dpi=300)
east_africa.columns
under_five = pd.read_excel("data/Under-five_Mortality_Rates_2024.xlsx", skiprows=14)
under_five
under_five.columns
under_five.describe()
neonatal = pd.read_excel("data/Neonatal_Mortality_Rates_2024.xlsx", skiprows=14)
neonatal.head()
neonatal.columns
neonatal.describe()
# Filter for median values only
under_five = under_five[
(under_five['Uncertainty.Bounds*'] == 'Median')
][['ISO.Code', 'Country.Name', 'Uncertainty.Bounds*', '2010.5', '2011.5', '2012.5', '2013.5', '2014.5', '2015.5', '2016.5', '2017.5', '2018.5', '2019.5', '2020.5', '2021.5', '2022.5', '2023.5']]
under_five
neonatal = neonatal[
(neonatal['Uncertainty.Bounds*'] == 'Median')
][['ISO.Code', 'Country.Name', 'Uncertainty.Bounds*', '2010.5', '2011.5', '2012.5', '2013.5', '2014.5', '2015.5', '2016.5', '2017.5', '2018.5', '2019.5', '2020.5', '2021.5', '2022.5', '2023.5']]
neonatal
east_africa = east_africa.rename(columns={
'GID_0': 'code',
'COUNTRY': 'country',
})
east_africa
under_five = under_five.rename(columns={
'ISO.Code': 'code',
'Country.Name': 'country',
'Uncertainty.Bounds*': 'estimate_type',
'2010.5': '2010',
'2011.5': '2011',
'2012.5': '2012',
'2013.5': '2013',
'2014.5': '2014',
'2015.5': '2015',
'2016.5': '2016',
'2017.5': '2017',
'2018.5': '2018',
'2019.5': '2019',
'2020.5': '2020',
'2021.5': '2021',
'2022.5': '2022',
'2023.5': '2023'
})
under_five
neonatal = neonatal.rename(columns={
'ISO.Code': 'code',
'Country.Name': 'country',
'Uncertainty.Bounds*': 'estimate_type',
'2010.5': '2010',
'2011.5': '2011',
'2012.5': '2012',
'2013.5': '2013',
'2014.5': '2014',
'2015.5': '2015',
'2016.5': '2016',
'2017.5': '2017',
'2018.5': '2018',
'2019.5': '2019',
'2020.5': '2020',
'2021.5': '2021',
'2022.5': '2022',
'2023.5': '2023'
})
neonatal
east_africa.duplicated().sum()
under_five.duplicated().sum()
neonatal.duplicated().sum()
east_africa.isna().sum()
under_five.isna().sum()
neonatal.isna().sum()
# List of East African countries codes
eac_codes = ['BDI', 'COD', 'KEN', 'RWA', 'SOM', 'SSD', 'TZA', 'UGA']
# Filter under_five
under_five_eac = under_five[under_five['code'].isin(eac_codes)]
under_five_eac
# Filter neonatal
neonatal_eac = neonatal[neonatal['code'].isin(eac_codes)]
neonatal_eac
# Merge under-five mortality rates into east_africa shapefile
east_africa_under_five = east_africa.merge(under_five_eac, on='code')
east_africa_under_five
# drop extra columns
east_africa_under_five.drop(columns = ['country_y'], axis = 1, inplace = True)
# rename country_x to country
east_africa_under_five.rename(columns={
'country_x': 'country'
}, inplace = True)
east_africa_under_five
# Merge neonatal mortality rates into east_africa shapefile
east_africa_neonatal = east_africa.merge(neonatal_eac, on='code')
east_africa_neonatal
# drop extra columns
east_africa_neonatal.drop(columns = ['country_y'], axis = 1, inplace = True)
# rename country_x to country
east_africa_neonatal.rename(columns={
'country_x': 'country'
}, inplace = True)
east_africa_neonatal
# Plot under-five mortality and save to a file
fig, ax = plt.subplots(1, 1, figsize=(10, 8))
east_africa_under_five.plot(column='2023', cmap='Reds', legend=True, ax=ax)
ax.set_title('Under-Five Mortality Rate in East Africa (2023)', fontsize=15)
plt.axis('off')
# Save the figure
plt.savefig('media/under_five_mortality_2023.png', dpi=300, bbox_inches='tight')
# Plot neonatal mortality
fig, ax = plt.subplots(1, 1, figsize=(10, 8))
east_africa_neonatal.plot(column='2023', cmap='Blues', legend=True, ax=ax)
ax.set_title('Neonatal Mortality Rate in East Africa (2023)', fontsize=15)
plt.axis('off')
# Save the figure
plt.savefig('media/neonatal_mortality_2023.png', dpi=300, bbox_inches='tight')
# 2. Melt/reshape the data
under_five_melted = east_africa_under_five.melt(id_vars=['code', 'country'],
value_vars=[str(year) for year in range(2010, 2024)],
var_name='year',
value_name='under_five_rate')
# Convert year to integer
under_five_melted['year'] = under_five_melted['year'].astype(int)
# 3. Plotting
plt.figure(figsize=(14,6))
# Under-five mortality plot
plt.subplot(1, 2, 1)
sns.lineplot(
data=under_five_melted,
x='year',
y='under_five_rate',
ci=None,
label='Average',
estimator='mean'
)
# Remove legend=False here
sns.scatterplot(
data=under_five_melted,
x='year',
y='under_five_rate',
hue='country',   # Keep coloring by country
s=40
)
plt.title('Under-Five Mortality Rate (East Africa)')
plt.ylabel('Mortality Rate (per 1000 live births)')
plt.xlabel('Year')
# 2. Melt/reshape the data
neonatal_melted = east_africa_neonatal.melt(id_vars=['code', 'country'],
value_vars=[str(year) for year in range(2010, 2024)],
var_name='year',
value_name='neonatal_rate')
# Convert year to integer
neonatal_melted['year'] = neonatal_melted['year'].astype(int)
# 3. Plotting
plt.figure(figsize=(14,6))
# Neonatal mortality plot
plt.subplot(1, 2, 2)
sns.lineplot(
data=neonatal_melted,
x='year',
y='neonatal_rate',
ci=None,
label='Average',
estimator='mean'
)
sns.scatterplot(
data=neonatal_melted,
x='year',
y='neonatal_rate',
hue='country',
s=40
)
plt.title('Neonatal Mortality Rate (East Africa)')
plt.ylabel('Mortality Rate (per 1000 live births)')
plt.xlabel('Year')
plt.legend(title='Country', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
# Save the plot as a PNG image
plt.savefig('media/neonatal_mortality_rate_east_africa.png', dpi=300, bbox_inches='tight')
# Highest under-five mortality
highest_under_five = under_five_eac.sort_values(by='2023', ascending=False).head(1)
# Highest neonatal mortality
highest_neonatal = neonatal_eac.sort_values(by='2023', ascending=False).head(1)
print("Highest Under-Five Mortality:", highest_under_five[['country', '2023']])
print("Highest Neonatal Mortality:", highest_neonatal[['country', '2023']])
library(reticulate)
use_condaenv("r_env", required = TRUE)
reticulate::repl_python()
knitr::include_graphics("media/output.png")
reticulate::repl_python()
knitr::include_graphics("media/region_trends.png")
reticulate::repl_python()
reticulate::py_install(
packages = c("pandas", "seaborn", "geopandas", "matplotlib"),
envname = NULL, # NULL means "use the current one"
method = "auto",
pip = TRUE
)
reticulate::repl_python()
knitr::include_graphics("media/burundi_map.png")
reticulate::repl_python()
knitr::include_graphics("media/congo_map.png")
reticulate::repl_python()
knitr::include_graphics("media/kenya_map.png")
reticulate::repl_python()
knitr::include_graphics("media/rwanda_map.png")
reticulate::repl_python()
knitr::include_graphics("media/somalia_map.png")
reticulate::repl_python()
knitr::include_graphics("media/sudan_map.png")
reticulate::repl_python()
knitr::include_graphics("media/tanzania_map.png")
reticulate::repl_python()
knitr::include_graphics("media/uganda_map.png")
reticulate::repl_python()
knitr::include_graphics("media/east_africa_map.png")
reticulate::repl_python()
knitr::include_graphics("media/under_five_mortality_2023.png")
reticulate::repl_python()
knitr::include_graphics("media/neonatal_mortality_2023.png")
reticulate::repl_python()
knitr::include_graphics("media/under_five_mortality_rate_east_africa.png")
reticulate::repl_python()
knitr::include_graphics("media/neonatal_mortality_rate_east_africa.png")
reticulate::repl_python()
library(reticulate)
use_condaenv("r_env", required = TRUE)
library(reticulate)
use_condaenv("r_env", required = TRUE)
reticulate::repl_python()
knitr::include_graphics("media/output.png")
reticulate::repl_python()
knitr::include_graphics("media/region_trends.png")
reticulate::repl_python()
reticulate::py_install(
packages = c("pandas", "seaborn", "geopandas", "matplotlib"),
envname = NULL, # NULL means "use the current one"
method = "auto",
pip = TRUE
)
reticulate::repl_python()
knitr::include_graphics("media/burundi_map.png")
reticulate::repl_python()
knitr::include_graphics("media/congo_map.png")
reticulate::repl_python()
knitr::include_graphics("media/kenya_map.png")
reticulate::repl_python()
knitr::include_graphics("media/rwanda_map.png")
reticulate::repl_python()
knitr::include_graphics("media/somalia_map.png")
reticulate::repl_python()
knitr::include_graphics("media/sudan_map.png")
reticulate::repl_python()
knitr::include_graphics("media/tanzania_map.png")
reticulate::repl_python()
knitr::include_graphics("media/uganda_map.png")
reticulate::repl_python()
knitr::include_graphics("media/east_africa_map.png")
reticulate::repl_python()
knitr::include_graphics("media/under_five_mortality_2023.png")
reticulate::repl_python()
knitr::include_graphics("media/neonatal_mortality_2023.png")
reticulate::repl_python()
knitr::include_graphics("media/neonatal_mortality_rate_east_africa.png")
reticulate::repl_python()
